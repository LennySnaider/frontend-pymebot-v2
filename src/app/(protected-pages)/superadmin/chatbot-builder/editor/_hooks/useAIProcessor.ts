'use client'

/**
 * frontend/src/app/(protected-pages)/modules/superadmin/chatbot-builder/editor/_hooks/useAIProcessor.ts
 * Hook para procesar prompts de IA y obtener respuestas
 * @version 1.0.0
 * @updated 2025-04-14
 */

import { useState, useCallback } from 'react'

interface UseAIProcessorOptions {
  mockResponses?: boolean;
  defaultDelay?: number;
  onProcessingStart?: () => void;
  onProcessingEnd?: (response: string) => void;
}

interface UseAIProcessorResult {
  processPrompt: (prompt: string, options?: {
    model?: string;
    temperature?: number;
    provider?: 'openai' | 'minimax';
    variables?: Record<string, any>;
  }) => Promise<string>;
  isProcessing: boolean;
  error: string | null;
}

export function useAIProcessor({
  mockResponses = false, // Por defecto NO usar respuestas simuladas
  defaultDelay = 500,
  onProcessingStart,
  onProcessingEnd
}: UseAIProcessorOptions = {}): UseAIProcessorResult {
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Funci√≥n para generar una respuesta de IA contextual basada en el prompt
  const generateContextualResponse = useCallback((prompt: string, variables: Record<string, any> = {}) => {
    const lowerPrompt = prompt.toLowerCase();
    
    // Reemplazar variables en el prompt
    let processedPrompt = prompt;
    Object.entries(variables).forEach(([key, value]) => {
      processedPrompt = processedPrompt.replace(new RegExp(`\\{\\{${key}\\}\\}`, 'g'), String(value));
    });
    
    // Para el AI Voice Agent, asegurarnos de dar respuestas que suenen natural al ser le√≠das
    if (lowerPrompt.includes('voice agent') || lowerPrompt.includes('agente de voz')) {
      return "Hola, soy el asistente de voz de la empresa. Estoy aqu√≠ para responder tus preguntas y ayudarte con lo que necesites. Puedes preguntarme sobre nuestros productos, servicios o agendar una cita.";
    }
    
    // Detectar la intenci√≥n del prompt para generar una respuesta adecuada
    if (lowerPrompt.includes('saludo') || lowerPrompt.includes('bienvenida')) {
      const businessName = variables.business_name || variables.nombre_negocio || 'nuestra empresa';
      return `¬°Hola! Bienvenido a ${businessName}. Soy el asistente virtual y estoy aqu√≠ para ayudarte. ¬øC√≥mo puedo asistirte hoy?`;
    }
    
    if (lowerPrompt.includes('producto') || lowerPrompt.includes('servicio') || lowerPrompt.includes('ofrecen')) {
      return `Ofrecemos una variedad de productos y servicios dise√±ados para satisfacer tus necesidades. Entre nuestras categor√≠as principales est√°n:\n\n‚Ä¢ Servicios de asesor√≠a personalizada\n‚Ä¢ Productos exclusivos para nuestros clientes\n‚Ä¢ Soluciones tecnol√≥gicas avanzadas\n\n¬øTe gustar√≠a obtener m√°s informaci√≥n sobre alguna categor√≠a espec√≠fica?`;
    }
    
    if (lowerPrompt.includes('horario') || lowerPrompt.includes('hora') || lowerPrompt.includes('atienden')) {
      return `Nuestro horario de atenci√≥n es:\n\n‚Ä¢ Lunes a Viernes: 9:00 AM - 6:00 PM\n‚Ä¢ S√°bados: 10:00 AM - 2:00 PM\n‚Ä¢ Domingos: Cerrado\n\n¬øHay algo m√°s en lo que pueda ayudarte?`;
    }
    
    if (lowerPrompt.includes('ubicaci√≥n') || lowerPrompt.includes('direcci√≥n') || lowerPrompt.includes('donde')) {
      return `Nos encontramos ubicados en Av. Principal #123, Colonia Centro. Referencias cercanas: a dos cuadras del parque central y frente al supermercado. ¬øNecesitas indicaciones m√°s espec√≠ficas?`;
    }
    
    if (lowerPrompt.includes('cita') || lowerPrompt.includes('agendar') || lowerPrompt.includes('reservar')) {
      return `Para agendar una cita, necesito algunos datos b√°sicos:\n\n1. Nombre completo\n2. N√∫mero de tel√©fono de contacto\n3. Fecha y hora preferida\n4. Servicio de inter√©s\n\n¬øPodr√≠as proporcionarme esta informaci√≥n para proceder con tu reserva?`;
    }
    
    if (lowerPrompt.includes('precio') || lowerPrompt.includes('costo') || lowerPrompt.includes('tarifa')) {
      return `Nuestros precios var√≠an seg√∫n el servicio espec√≠fico que necesites. Sin embargo, puedo darte un rango aproximado:\n\n‚Ä¢ Servicios b√°sicos: $500 - $1,000\n‚Ä¢ Servicios premium: $1,500 - $3,000\n‚Ä¢ Paquetes especiales: Desde $2,500\n\n¬øTe gustar√≠a un presupuesto personalizado?`;
    }
    
    if (lowerPrompt.includes('problema') || lowerPrompt.includes('queja') || lowerPrompt.includes('insatisfecho')) {
      return `Lamento mucho escuchar que tienes un problema. En nuestra empresa nos tomamos muy en serio la satisfacci√≥n del cliente. Para ayudarte mejor, ¬øpodr√≠as darme m√°s detalles sobre la situaci√≥n? Alternativamente, puedo conectarte con un representante humano para resolver tu caso de manera m√°s personalizada.`;
    }
    
    if (lowerPrompt.includes('gracias') || lowerPrompt.includes('agradezco') || lowerPrompt.includes('ayuda')) {
      return `¬°Ha sido un placer ayudarte! Si tienes m√°s preguntas en el futuro, no dudes en contactarnos nuevamente. ¬°Que tengas un excelente d√≠a!`;
    }
    
    // Respuesta por defecto si no se detecta una intenci√≥n espec√≠fica
    return `Gracias por tu consulta. Puedo proporcionarte informaci√≥n sobre nuestros servicios, horarios, ubicaci√≥n, reservas y mucho m√°s. ¬øEn qu√© tema espec√≠fico est√°s interesado?`;
  }, []);

  // Funci√≥n principal para procesar un prompt y obtener una respuesta de IA
  const processPrompt = useCallback(async (
    prompt: string, 
    options: {
      model?: string;
      temperature?: number;
      provider?: 'openai' | 'minimax';
      variables?: Record<string, any>;
    } = {}
  ): Promise<string> => {
    // Limpiar errores previos
    setError(null);
    
    // Notificar inicio de procesamiento
    setIsProcessing(true);
    if (onProcessingStart) onProcessingStart();
    
    try {
      // Extraer opciones con valores por defecto
      const { 
        model = 'gpt-3.5-turbo', 
        temperature = 0.7, 
        provider = 'openai',
        variables = {} 
      } = options;
      
      let response: string;
      
      // En modo de simulaci√≥n, generamos respuestas contextuales
      if (mockResponses) {
        // Simular tiempo de respuesta 
        const delay = variables.delay || defaultDelay;
        await new Promise(resolve => setTimeout(resolve, delay));
        
        // Generar respuesta basada en el prompt
        response = generateContextualResponse(prompt, variables);
      } 
      // Modo real con llamada a la API
      else {
        try {
          console.log(`üîÑ Llamando API ${provider} real con modelo ${model} (temp: ${temperature})...`);
          
          // Determinar si es un nodo de voz
          const isVoiceNode = model.includes('voice') || provider.includes('voice');
          
          if (isVoiceNode) {
            console.log('üéôÔ∏è Procesando nodo de voz');
            
            // SOLUCI√ìN LOCAL PARA DESARROLLO
            console.log('‚ö†Ô∏è Utilizando generaci√≥n de respuestas local debido a problemas de API');
            
            // Biblioteca de respuestas gen√©ricas bien formadas en espa√±ol CON ACENTOS
            const respuestas = [
              "¬°Hola! Soy el asistente virtual de voz. ¬øEn qu√© puedo ayudarte hoy?",
              "Gracias por contactarnos. Estoy aqu√≠ para responder tus preguntas sobre propiedades inmobiliarias.",
              "¬øNecesitas informaci√≥n adicional sobre √°ticos con terraza o apartamentos c√©ntricos?",
              "Puedo ayudarte a resolver tus dudas. Dime qu√© tipo de caracter√≠sticas est√°s buscando en tu pr√≥xima casa.",
              "Estoy procesando tu consulta sobre propiedades. ¬øHay alguna zona espec√≠fica que te interese m√°s?"
            ];
            
            // Extraer palabras clave del prompt para contextualizar la respuesta
            const lowerPrompt = prompt.toLowerCase();
            let respuesta = "";
            
            if (lowerPrompt.includes("hola") || lowerPrompt.includes("saludar") || lowerPrompt.includes("bienvenida")) {
              respuesta = "¬°Hola! Soy el asistente virtual especializado en propiedades. Puedo informarte sobre √°ticos, apartamentos, chalets y mucho m√°s. ¬øQu√© tipo de inmueble est√°s buscando?";
            } 
            else if (lowerPrompt.includes("gracias") || lowerPrompt.includes("adios") || lowerPrompt.includes("adi√≥s")) {
              respuesta = "Gracias por tu inter√©s en nuestras propiedades. Ha sido un placer ayudarte. Si necesitas m√°s informaci√≥n, no dudes en contactarnos. ¬°Que tengas un excelente d√≠a!";
            }
            else if (lowerPrompt.includes("precio") || lowerPrompt.includes("costo") || lowerPrompt.includes("valor")) {
              respuesta = "Los precios de nuestras propiedades var√≠an seg√∫n la ubicaci√≥n, tama√±o y caracter√≠sticas. Tenemos apartamentos desde 150.000‚Ç¨ hasta casas de lujo por m√°s de 500.000‚Ç¨. ¬øEn qu√© rango de precios est√°s interesado?";
            }
            else if (lowerPrompt.includes("ayuda") || lowerPrompt.includes("problema")) {
              respuesta = "Estoy aqu√≠ para ayudarte a encontrar la propiedad perfecta. Por favor, cu√©ntame qu√© caracter√≠sticas son importantes para ti: n√∫mero de habitaciones, ubicaci√≥n, presupuesto...";
            }
            else {
              // Si no hay coincidencia espec√≠fica, usar una respuesta aleatoria
              respuesta = respuestas[Math.floor(Math.random() * respuestas.length)];
            }
            
            console.log('‚úÖ Respuesta local generada:', respuesta);
            return respuesta; // Devolver el texto para s√≠ntesis de voz
            
          } else {
            // Realizar la llamada a la API real de IA (no simulada)
            console.log('Realizando llamada a API real para obtener respuesta de IA');
            
            // En desarrollo, tambi√©n usar modo local para nodos normales
            // Biblioteca de respuestas gen√©ricas bien formadas en espa√±ol
            const respuestasGenericas = [
              "Estoy procesando tu consulta. Por favor, dame m√°s detalles para poder ayudarte mejor.",
              "Gracias por tu pregunta. Perm√≠teme buscar la informaci√≥n que necesitas.",
              "Entiendo lo que est√°s buscando. ¬øPodr√≠as proporcionarme m√°s contexto?",
              "Estoy aqu√≠ para asistirte. ¬øHay algo espec√≠fico que deseas saber sobre este tema?",
              "Tu consulta es importante. Estoy analizando la informaci√≥n disponible para darte la mejor respuesta."
            ];
            
            // Usar respuesta contextual basada en el prompt
            console.log('‚ö†Ô∏è Usando respuestas locales para desarrollo debido a problemas de API');
            const respuestaGenerica = respuestasGenericas[Math.floor(Math.random() * respuestasGenericas.length)];
            console.log('‚úÖ Respuesta local generada:', respuestaGenerica);
            return respuestaGenerica;
          }
        } catch (error) {
          console.error('üî• Error general en modo real:', error);
          return "Lo siento, en este momento no puedo procesar tu solicitud. Por favor, int√©ntalo de nuevo m√°s tarde.";
        }
      }
      
      // Notificar finalizaci√≥n de procesamiento
      if (onProcessingEnd) onProcessingEnd(response);
      
      return response;
    } catch (err) {
      // Manejar errores
      console.error("Error procesando prompt de IA:", err);
      const errorMessage = err instanceof Error ? err.message : "Error desconocido al procesar la IA";
      setError(errorMessage);
      
      // Devolver mensaje de error amigable
      return "Lo siento, hubo un problema al procesar tu consulta. Por favor, intenta de nuevo m√°s tarde.";
    } finally {
      // Asegurar que el estado de procesamiento se actualice
      setIsProcessing(false);
    }
  }, [mockResponses, defaultDelay, generateContextualResponse, onProcessingStart, onProcessingEnd]);

  return {
    processPrompt,
    isProcessing,
    error
  };
}